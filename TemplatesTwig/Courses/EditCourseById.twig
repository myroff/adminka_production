{% extends "main.html.twig" %}
{% block content %}
<style>
    #updateItemTable,
    #messageBox
    {
        display:none;
        border:2px solid #a1a1a1;
        padding:20px;
        background:#dddddd;
        width:460px;
        border-radius:20px;

        position:fixed;
        top:250px;
        left:30%;
        z-index:100;
    }

    .kurTrmDiv{border-top:1px solid black;padding:3px 0px;width:400px;}
</style>

<div id="meldung">
{% if meldung is not empty %}
    {{ meldung }}
{% endif %}
</div>

<div class="row">
    <div class="col s12 valign-wrapper">
        <div class="left" style="margin-right:10px">
            {{ course.kurName }}
        </div>
        <div class="left">
            <button onclick="deleteCourse({{course.kurId}})" type="button" class="waves-effect waves-light btn-small">Löschen</button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col s12 m2">
        <p class="itemName">
            Name
        </p>
        <p>
            <span class="itemValue">{{course.kurName}}</span>
            <a class="modal-trigger" href="#edit_item"><i class="material-icons blue-text lighten-1-text editItem">edit</i></a>
        </p>
    </div>
    <div class="col s12 m2">
        <p class="itemName">
            Lehrer
        </p>
        <p>
            <span class="itemValue">{{course.lehrVorname}} {{course.lehrName}}</span>
            <a class="modal-trigger" href="#updateLehrerTable"><i class="material-icons blue-text lighten-1-text">edit</i></a>
        </p>
    </div>
    <div class="col s12 m2">
        <p class="itemName">
            Max. Kunden
        </p>
        <p>
            <span class="itemValue">{{course.maxKnd}}</span>
            <a class="modal-trigger" href="#edit_item"><i class="material-icons blue-text lighten-1-text editItem">edit</i></a>
        </p>
    </div>
    <div class="col s12 m2">
        <p class="itemName">
            Preis
        </p>
        <p>
            <span class="itemValue">{{course.kurPreis}}</span>
            <a class="modal-trigger" href="#edit_item"><i class="material-icons blue-text lighten-1-text editItem">edit</i></a>
        </p>
    </div>
    <div class="col s12 m2">
        <p class="itemName">
            Zahlungstype
        </p>
        <p>
            <span class="itemValue">
                {% if course.kurIsStdPreis > 0 %}
                    pro Stunde
                {% else %}
                    pro Monat
                {% endif %}
            </span>
            <a class="modal-trigger" href="#updateZahlungstypeTable"><i class="material-icons blue-text lighten-1-text">edit</i></a>
        </p>
    </div>
</div>

<div class="row">
    <div class="col s12 m2">
        <p class="itemName">
            Alter
        </p>
        <p>
            <span class="itemValue">
                {{course.kurMinAlter}}
                {% if course.kurMaxAlter is not empty and course.kurMaxAlter != course.kurMinAlter %}
                    bis {{course.kurMaxAlter}}
                {% endif %}
            </span>
            <a class="modal-trigger" href="#updateAlterTable"><i class="material-icons blue-text lighten-1-text">edit</i></a>
        </p>
    </div>
    <div class="col s12 m2">
        <p class="itemName">
            Klassen
        </p>
        <p>
            <span class="itemValue">
                {{course.kurMinKlasse}}
                {% if course.kurMaxKlasse is not empty and course.kurMaxKlasse != course.kurMinKlasse %}
                    bis {{course.kurMaxKlasse}}
                {% endif %}
            </span>
            <a class="modal-trigger" href="#updateKlassenTable"><i class="material-icons blue-text lighten-1-text">edit</i></a>
        </p>
    </div>
    <div class="col s12 m2">
        <p class="itemName">
            Kurs aktiv?
        </p>
        <p>
            <span class="itemValue">
                {% if course.isKurInactive == 0 %}
                    ja
                {% else %}
                    nein
                {% endif %}
            </span>
            <a class="modal-trigger" href="#updateIsKurInactiveTable"><i class="material-icons blue-text lighten-1-text">edit</i></a>
        </p>
    </div>
    <div class="col s12 m2">
        <p class="itemName">
            Beschreibung
        </p>
        <p>
            <span class="itemValue">
                {{ course.kurBeschreibung }}
            </span>
            <a class="modal-trigger" href="#updateBeschreibungTable"><i class="material-icons blue-text lighten-1-text">edit</i></a>
        </p>
    </div>
</div>

<div class="row">
    <div class="col s12 valign-wrapper">
        <h5 class="left" style="margin-right:10px;">Termine</h5>
        <a  class="waves-effect waves-light btn btn-small modal-trigger" style="top:7px;" href="#addTermin">Neuen Termin</a>
    </div>
</div>
<div style="margin-top:10px;">
{% if schedule is empty %}
    <p>Keine Termine gesetz</p>
{% else %}
<div class="row">
    <div class="col m1 s12"><b>Season</b></div>
    <div class="col m1 s12"><b>Raum</b></div>
    <div class="col m1 s12"><b>Tag</b></div>
    <div class="col m1 s12"><b>Termin</b></div>
</div>
    {% for termin in schedule %}
        <div class="row">
            <div class="col m1 s12">{{ termin.season_name }}</div>
            <div class="col m1 s12">Raum {{ termin.raum }}</div>
            <div class="col m1 s12">{{ indxToWeekday(termin.wochentag) }}</div>
            <div class="col m1 s12">{{ termin.anfang|date('H:i') }} - {{ termin.ende|date('H:i') }}</div>
            <div class="col m1 s12">
                <button type="button" class="waves-effect waves-light btn btn-small editTermin"
                    stnPlId="{{termin.stnPlId}}" raum="{{termin.raum}}" season_id="{{termin.season_id}}"
                    wochentag="{{termin.wochentag}}" anfang="{{ termin.anfang|date('H:i') }}" ende="{{ termin.ende|date('H:i') }}"
                >
                    Bearbeiten
                </button>
            </div>
            <div class="col m1 s12">
                <button type="button" class="waves-effect waves-light btn btn-small deleteTermin" stnPlId="{{termin.stnPlId}}">
                    Löschen
                </button>
            </div>
        </div>
    {% endfor %}
{% endif %}
</div>

<div class="row">
    <div class="col s12 valign-wrapper">
        <h5 class="left" style="margin-right:10px;">Saisonale Einstellungen</h5>
        <a href="#addSeasonsConfigTable"
            id="openAddSeasonsConfigTable"
            class="waves-effect waves-light btn btn-small modal-trigger"
            style="top:7px;" >Neue seasonale Einstellungen</a>
    </div>
</div>
{% if seasonsConfigs is empty %}
    <p>Keine Seasonal Einstellungen sind gesetz</p>
{% else %}
<div class="row">
    <div class="col m1 s12"><b>Season</b></div>
    <div class="col m1 s12"><b>Season Name</b></div>
    <div class="col m1 s12"><b>Lehrer</b></div>
    <div class="col m1 s12"><b>Season Preis</b></div>
    <div class="col m1 s12"><b>Zahlungstype</b></div>
    <div class="col m1 s12"><b>Klasse</b></div>
    <div class="col m1 s12"><b>Alter</b></div>
</div>
    {% for season in seasonsConfigs %}
        <div class="row">
            <div class="col m1 s12">{{ season.season_name }}</div>
            <div class="col m1 s12">{{ season.course_name_suffix }}</div>
            <div class="col m1 s12">
                {% if season.lehrId > 0 %}
                    {{ season.vorname }} {{ season.name }}
                {% endif %}
            </div>
            <div class="col m1 s12">{{ season.seasonal_price }}</div>
            <div class="col m1 s12">
                {% if course.kurIsStdPreis > 0 %}
                    pro Stunde
                {% else %}
                    pro Monat
                {% endif %}
            </div>
            <div class="col m1 s12">
                {{ season.kurMinKlasse }}
                {% if season.kurMaxKlasse is not empty and season.kurMaxKlasse != season.kurMinKlasse %}
                    bis {{ season.kurMaxKlasse }}
                {% endif %}
            </div>
            <div class="col m1 s12">
                {{ season.kurMinAlter }}
                {% if season.kurMaxAlter is not empty and season.kurMaxAlter != season.kurMinAlter %}
                    bis {{ season.kurMaxAlter }}
                {% endif %}
            </div>
            <div class="col m1 s12">
                <button type="button" class="waves-effect waves-light btn btn-small editSeasonsConfig"
                    kurId="{{season.kurId}}" season_id="{{season.season_id}}" lehrId="{{season.lehrId}}"
                    course_name_suffix="{{ season.course_name_suffix }}" season_price="{{ season.seasonal_price }}"
                    kurMinAlter="{{season.kurMinAlter}}" kurMaxAlter="{{season.kurMaxAlter}}"
                    kurMinKlasse="{{season.kurMinKlasse}}" kurMaxKlasse="{{season.kurMaxKlasse}}"
                >
                    Bearbeiten
                </button>
            </div>
            <div class="col m1 s12">
                <button type="button" class="waves-effect waves-light btn btn-small deleteSeasonsConfig"
                    kurId="{{season.kurId}}" season_id="{{season.season_id}}"
                >
                    Löschen
                </button>
            </div>
        </div>
    {% endfor %}
{% endif %}

<!-- message box !-->
<div id="messageBox">
    <button id="messageBox_OkButton" class="waves-effect waves-light btn-small">Schliessen</button>
    <div id="messageBox_message"></div>
</div>

<!-- Update default item -->
<div id="edit_item" class="modal">
    <form id="edit_item_form" method="post" action="{{ requestUri }}">
        <div class="modal-content">
            <h4 id="edit_item_label"></h4>
            <input type="hidden" id="input_value_name" name="updateItemTable_Form_Name" value="hiddenValue"/>
            <div id="upateItemTable_Form_ValueContainer">
                <input type="text" id="input_value_value" name="updateItemTable_Form_Value"/>
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <button form="edit_item_form" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

<!-- Update für Lehrer -->
<div id="updateLehrerTable" class="modal">
    <form id="updateLehrerTable_form" method="post" action="{{ requestUri }}">
        <div class="modal-content">
            <h4>Lehrer</h4>
            <input type="hidden" id="updateItemTable_Form_Name" name="updateItemTable_Form_Name" value="Lehrer"/>
            <div>
                {{ getLehrerSelector("updateLehrerTable_form_Value", "updateLehrerTable_lehrId", "", "", true) }}
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <button form="updateLehrerTable_form" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

<!-- Update für Zahlungstype -->
<div id="updateZahlungstypeTable" class="modal">
    <form id="upateZahlungstypeTable_form" method="post" action="{{ requestUri }}">
        <div class="modal-content">
            <h4>Zahlungstype</h4>
            <input type="hidden" id="updateItemTable_Form_Name" name="updateItemTable_Form_Name" value="Zahlungstype"/>
            <div>
                <select id="upateZahlungstypeTable_form_Value" name="updateItemTable_Form_Value" >
                    <option value="proMonat">pro Monat</option>
                    <option value="proStunde">pro Stunde</option>
                </select>
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <button form="upateZahlungstypeTable_form" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
    <script>
        var Zahlungstype_Selector = document.getElementById('upateZahlungstypeTable_form_Value');
        if(typeof(M) !== 'undefined'){
            var instances = M.FormSelect.init(Zahlungstype_Selector);
        }
        else {
            Zahlungstype_Selector.classList.add('browser-default');
        }
    </script>
</div>

<!-- Update für Alter -->
<div id="updateAlterTable" class="modal">
    <form id="updateAlterTable_form" method="post" action="{{ requestUri }}">
        <div class="modal-content">
            <h4>Alter</h4>
            <input type="hidden" name="updateItemTable_Form_Name" value="Alter"/>
            <input type="hidden" name="updateItemTable_Form_Value" value="leer"/>
            <div class="row">
                <div class="col s12 m2">
                    <label for="updateAlterTable_form_von" >von</label>
                    <input id="updateAlterTable_form_von" name='kurMinAlter' type='number' />
                </div>
                <div class="col s12 m2">
                    <label for="updateAlterTable_form_bis" >bis</label>
                    <input id="updateAlterTable_form_bis" name='kurMaxAlter' type='number' />
                </div>
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <button form="updateAlterTable_form" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

<!-- Update für Klasse -->
<div id="updateKlassenTable" class="modal">
    <form id="updateKlassenTable_form" method="post" action="{{ requestUri }}">
        <div class="modal-content">
            <h4>Klassen</h4>
            <input type="hidden" name="updateItemTable_Form_Name" value="Klassen"/>
            <input type="hidden" name="updateItemTable_Form_Value" value="leer"/>
            <div class="row">
                <div class="col s12 m2">
                    <label for="updateKlassenTable_form_von" >von</label>
                    <input id="updateKlassenTable_form_von" name='kurMinKlasse' type='number' />
                </div>
                <div class="col s12 m2">
                    <label for="updateKlassenTable_form_bis" >bis</label>
                    <input id="updateKlassenTable_form_bis" name='kurMaxKlasse' type='number' />
                </div>
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <button form="updateKlassenTable_form" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

<!-- Update für isKurInactive -->
<div id="updateIsKurInactiveTable" class="modal">
    <form id="updateIsKurInactiveTable_form" method="post" action="{{ requestUri }}">
        <div class="modal-content">
            <h4>Kurs aktiv?</h4>
            <input type="hidden" id="updateItemTable_Form_Name" name="updateItemTable_Form_Name" value="isKurInactive"/>
            <div>
                <select id="updateIsKurInactiveTable_form_Value" name="updateItemTable_Form_Value" >
                    <option value="ja">ja</option>
                    <option value="nein">nein</option>
                </select>
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <button form="updateIsKurInactiveTable_form" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
    <script>
        var Zahlungstype_Selector = document.getElementById('updateIsKurInactiveTable_form_Value');
        if(typeof(M) !== 'undefined'){
            var instances = M.FormSelect.init(Zahlungstype_Selector);
        }
        else {
            Zahlungstype_Selector.classList.add('browser-default');
        }
    </script>
</div>

<!-- Update für Beschreibung -->
<div id="updateBeschreibungTable" class="modal">
    <form id="updateBeschreibungTable_form" method="post" action="{{ requestUri }}">
        <div class="modal-content">
            <h4>Beschreibung</h4>
            <input type="hidden" id="updateItemTable_Form_Name" name="updateItemTable_Form_Name" value="Beschreibung"/>
            <textarea id="Beschreibung_Form_Value" name="updateItemTable_Form_Value" cols="45" rows="4"></textarea>
        </div>
    </form>
    <div class="modal-footer">
        <button form="updateBeschreibungTable_form" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

<!-- Form für neuen Termin -->
<div id="addTermin" class="modal">
    <form id="addTerminForm" method="post" action="{{ requestUri }}">
        <input type="hidden" name="kurId" value="{{ course.kurId }}"/>
        <div class="modal-content">
            <h4>Neuer Termin</h4>
            <div class="row">
                <div class="input-field col s12 m6">
                    {{ getSeasonsSelector("season_id", "addTerminForm-season_id", "", "Saison", true) }}
                </div>
                <div class="input-field col s12 m6">
                    <input id="addTerminForm-raum" name="raum" type="text" />
                    <label for="addTerminForm-raum">Raum</label>
                </div>
            </div>
            <div class="row">
                <div class="input-field col s12 m6">
                    {{ getWeekdaySelector("wochentag", "addTerminForm-wochentag", "", "Tag", true) }}
                </div>
            </div>
            <div class="row">
                <div class="input-field col s12 m2">
                    Zeit (format: hh:mm)
                </div>
                <div class="input-field col s12 m2">
                    von <input class="s6" name="anfang" type="time" />
                </div>
                <div class="input-field col s12 m2">
                    bis <input class="s6" name="ende" type="time" />
                </div>
            </div>
        </div>
    </form>
    <div class="modal-footer">
        <button form="addTerminForm" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

<!-- update Termin -->
<div id="updateTerminTable" class="modal">
    <form id="updateTerminForm" method="post" action="{{ requestUri }}">
        <input type="hidden" name="stnPlId" value="" id="updateTerminForm_stnPlId"/>
        <div class="modal-content">
            <h4>Termin bearbeiten</h4>
            <table>
                <tr>
                    <th>
                        Saison
                    </th>
                    <td>
                        {{ getSeasonsSelector("season_id", "updateTerminForm_season_id") }}
                    </td>
                </tr>
                <tr>
                    <th>
                        Raum
                    </th>
                    <td>
                        <input name="raum" type="text" id="updateTerminForm_Raum"/>
                    </td>
                </tr>
                <tr>
                    <th>
                        Tag
                    </th>
                    <td>
                        {{ getWeekdaySelector("wochentag", "updateTerminForm_Wochentag") }}
                    </td>
                </tr>
                <tr>
                    <th>
                        Zeit<br>(format: hh:mm)
                    </th>
                    <td>
                        von <input name="anfang" type="time" id="updateTerminForm_Anfang"/>
                        bis <input name="ende" type="time" id="updateTerminForm_Ende"/>
                    </td>
                </tr>
            </table>
        </div>
    </form>
    <div class="modal-footer">
        <button form="updateTerminForm" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

<!-- create new season config -->
<div id="addSeasonsConfigTable" class="modal">
    <form id="addSeasonsConfigForm" method="post" action="{{ requestUri }}">
        <input type="hidden" name="kurId" value="{{ course.kurId }}" id="addSeasonsConfigForm-kurId"/>
        <div class="modal-content">
            <h4>Neue saisonale Enstellungen</h4>
            <table>
                <tr>
                    <th>
                        Für Saison
                    </th>
                    <td>
                        {{ getSeasonsSelector("season_id", "addSeasonsConfigForm-season_id") }}
                    </td>
                </tr>
                <tr>
                    <th>
                        Saisonale Name
                    </th>
                    <td>
                        <input name="course_name_suffix" type="text" id="addSeasonsConfigForm-course_name_suffix"/>
                    </td>
                </tr>
                <tr>
                    <th>
                        Lehrer
                    </th>
                    <td>
                        {{ getLehrerSelector("lehrId", "addSeasonsConfigForm-lehrId") }}
                    </td>
                </tr>
                <tr>
                    <th>
                        Saisonale Preis
                    </th>
                    <td>
                        <input name="seasonal_price" type="text" id="addSeasonsConfigForm-seasonal_price"/>
                    </td>
                </tr>
                <tr>
                    <th>
                        Saisonal Zahlungstype
                    </th>
                    <td>
                       <select name="isHourPrice" id="addSeasonsConfigForm-isHourPrice">
                            <option value="proMonat">pro Monat</option>
                            <option value="proStunde">pro Stunde</option>
                        </select>
                        <script>
                            var Zahlungstype_Selector = document.getElementById('addSeasonsConfigForm-isHourPrice');
                            if(typeof(M) !== 'undefined'){
                                var instances = M.FormSelect.init(Zahlungstype_Selector);
                            }
                            else {
                                Zahlungstype_Selector.classList.add('browser-default');
                            }
                        </script>
                    </td>
                </tr>
                <tr>
                    <th>
                        Klassen
                    </th>
                    <td>
                        von <input name="kurMinKlasse" type="number" id="addSeasonsConfigForm-kurMinKlasse"/>
                        bis <input name="kurMaxKlasse" type="number" id="addSeasonsConfigForm-kurMaxKlasse"/>
                    </td>
                </tr>
                <tr>
                    <th>
                        Alter
                    </th>
                    <td>
                        von <input name="kurMinAlter" type="number" id="addSeasonsConfigForm-kurMinAlter"/>
                        bis <input name="kurMaxAlter" type="number" id="addSeasonsConfigForm-kurMaxAlter"/>
                    </td>
                </tr>
            </table>
        </div>
    </form>
    <div class="modal-footer">
        <button form="addSeasonsConfigForm" class="waves-effect waves-green btn" type='submit' >Speichern</button>
        <a href="#!" class="modal-close waves-effect waves-red btn red">Abbrechen</a>
    </div>
</div>

{% block javascript %}
<script>

const meldung = document.getElementById('meldung');

/* message box schliessen */
document.getElementById('messageBox_OkButton').onclick = () => {
    document.getElementById('messageBox').style.display = 'none';
    document.getElementById('messageBox_message').innerHTML = '';
};

function deleteCourse(courseId)
{
    if(confirm('Wollen Sie wirklich diesen Kurs löschen?')) {

        var postData = new FormData();
        postData.append('kurId', courseId);

        fetch('{{ constant('BASIS_URL') }}/admin/ajaxDeleteKurs', {
            method: "POST",
            body: postData
        })
        .then(response => response.json())
        .then(res => {
            document.getElementById('messageBox_message').innerHTML = res.message;
            document.getElementById('messageBox').style.display = 'block';
        });
    }
}

document.addEventListener('DOMContentLoaded', function()
{
    var elems = document.querySelectorAll('.modal');
    var instances = M.Modal.init(elems);

    var editItemLabel	= document.getElementById('edit_item_label');
    var inputValueName	= document.getElementById('input_value_name');
    var inputValueValue	= document.getElementById('input_value_value');

    const editButtonList = document.getElementsByClassName('editItem');

    for(var i=0; i<editButtonList.length; i++) {

        editButtonList[i].onclick = function(e){
            var parent		= e.currentTarget.parentNode.parentNode.parentNode;
            var itemLabel	= parent.getElementsByClassName('itemName')[0].textContent.replace(/\s+/, ' ').trim();
            var itemName	= itemLabel.replace(/\s/, '').trim();
            var itemValue	= parent.getElementsByClassName('itemValue')[0].textContent.trim();

            editItemLabel.textContent	= itemName;
            inputValueName.value		= itemName;
            inputValueValue.value		= itemValue;
        };
    }

    const editTerminButtons = document.getElementsByClassName('editTermin');

    for(var i=0; i<editTerminButtons.length; i++) {

        editTerminButtons[i].onclick = function(e){
            document.getElementById('updateTerminForm_season_id').value = this.getAttribute('season_id');
            document.getElementById('updateTerminForm_stnPlId').value = this.getAttribute('stnPlId');
            document.getElementById('updateTerminForm_Raum').value = this.getAttribute('raum');
            document.getElementById('updateTerminForm_Anfang').value = this.getAttribute('anfang');
            document.getElementById('updateTerminForm_Ende').value = this.getAttribute('ende');
            document.getElementById('updateTerminForm_Wochentag').value = this.getAttribute('wochentag');

            M.Modal.getInstance( document.getElementById('updateTerminTable') ).open();
        };
    }

    document.getElementById('updateTerminForm').onsubmit = function(e){
        e.preventDefault();
        const postData = new FormData(this);

        fetch('{{ constant('BASIS_URL') }}/admin/ajaxUpdateTermin', {
            method: 'POST',
            body: postData
        })
        .then(response => response.json())
        .then(response => {
            if(response.status === 'ok') {
                alert(response.status);
                location.reload();
            }
            else {
                alert("Fehler: "+response.status);
            }
        })
        .catch((errorThrown) => {
            meldung.innerHTML = errorThrown;
        })
        ;
    };

    const deleteTerminButtons = document.getElementsByClassName('deleteTermin');

    for(var i=0; i<deleteTerminButtons.length; i++) {
        deleteTerminButtons[i].onclick = function(e) {

            if(confirm('Wollen Sie wirklich diesen Termin löschen?')) {

                var postData = new FormData();
                postData.append('stnPlId', this.getAttribute('stnPlId') );

                fetch('{{ constant('BASIS_URL') }}/admin/ajaxDeleteTermin', {
                    method: 'POST',
                    body: postData
                })
                .then(response => response.json())
                .then(response => {

                    if(response.status === 'ok') {

                        alert(response.status);
                        location.reload();
                    }
                    else {
                        alert("Fehler: "+response.status);
                    }
                })
                .catch((errorThrown) => {
                    meldung.innerHTML = errorThrown;
                })
                ;
            }
        };
    }

    document.getElementById('openAddSeasonsConfigTable').onclick = function(e) {

        document.getElementById('addSeasonsConfigForm-season_id').disabled = false;

        document.getElementById('addSeasonsConfigForm-season_id').value = '';
        document.getElementById('addSeasonsConfigForm-course_name_suffix').value = '';
        document.getElementById('addSeasonsConfigForm-lehrId').value = '';
        document.getElementById('addSeasonsConfigForm-seasonal_price').value = '';
        document.getElementById('addSeasonsConfigForm-kurMinKlasse').value = '';
        document.getElementById('addSeasonsConfigForm-kurMaxKlasse').value = '';
        document.getElementById('addSeasonsConfigForm-kurMinAlter').value = '';
        document.getElementById('addSeasonsConfigForm-kurMaxAlter').value = '';
    };

    const editSeasonConfigButtons = document.getElementsByClassName('editSeasonsConfig');

    for(var i=0; i < editSeasonConfigButtons.length; i++) {

        editSeasonConfigButtons[i].onclick = function(e){

            document.getElementById('addSeasonsConfigForm-season_id').value = this.getAttribute('season_id');
            document.getElementById('addSeasonsConfigForm-course_name_suffix').value = this.getAttribute('course_name_suffix');
            document.getElementById('addSeasonsConfigForm-lehrId').value = this.getAttribute('lehrId');
            document.getElementById('addSeasonsConfigForm-seasonal_price').value = this.getAttribute('season_price');
            document.getElementById('addSeasonsConfigForm-kurMinKlasse').value = this.getAttribute('kurMinKlasse');
            document.getElementById('addSeasonsConfigForm-kurMaxKlasse').value = this.getAttribute('kurMaxKlasse');
            document.getElementById('addSeasonsConfigForm-kurMinAlter').value = this.getAttribute('kurMinAlter');
            document.getElementById('addSeasonsConfigForm-kurMaxAlter').value = this.getAttribute('kurMaxAlter');

            document.getElementById('addSeasonsConfigForm-season_id').disabled = true;
            //M.FormSelect.getInstance( document.getElementById('addSeasonsConfigForm-season_id') ).material_select();
            M.Modal.getInstance( document.getElementById('addSeasonsConfigTable') ).open();
        };
    }

    const deleteSeasonConfigButtons = document.getElementsByClassName('deleteSeasonsConfig');

    for(var i=0; i < deleteSeasonConfigButtons.length; i++) {

        deleteSeasonConfigButtons[i].onclick = function(e){

            if(confirm('Wollen Sie wirklich dieses Season Config löschen?')) {

                var postData = new FormData();
                postData.append('season_id', this.getAttribute('season_id') );
                postData.append('kurId', this.getAttribute('kurId') );

                fetch('{{ constant('BASIS_URL') }}/admin/deleteCourseSeasonsConfig', {
                    method: 'POST',
                    body: postData
                })
                .then(response => response.json())
                .then(response => {

                    if(response.status === 'ok') {

                        location.reload();
                    }
                    else {
                        alert("Fehler: "+response.status);
                    }
                })
                .catch((errorThrown) => {
                    meldung.innerHTML = errorThrown;
                })
                ;
            }
        };
    }
});

const addTimeForm = document.getElementById('addTerminForm');

addTimeForm.onsubmit = function(e) {
    e.preventDefault();
    const postData = new FormData(this);

    fetch('{{ constant('BASIS_URL') }}/admin/ajaxAddNewTermin', {
        method: 'POST',
        body: postData
    })
    .then(response => response.json())
    .then(response => {
        if(typeof response.fehler === 'undefined') {

            var inputs = document.querySelector("#addTerminForm input");

            for (var i=0; i < inputs.length; i++) {
                test[i].style.background = '';
            }

            meldung.innerHTML = response.info;
            meldung.append("<br>");

            for(var i in response.data)
            {
                meldung.append(i+" = ");
                meldung.append(response.data[i]);
                meldung.append("<br>");
            }
            meldung.append("<br><br>");
            meldung.append(response);
            setTimeout(function () {
                location.reload();
            }, 1000);
        }
        else {
            meldung.innerHTML = response.fehler;

            var inputs = document.querySelector("#addTerminForm input");

            for (var i=0; i < inputs.length; i++) {
                inputs[i].style.background = '';
            }
            for(i=0; i<response.fehlerInput.length; i++)
            {
                document.querySelector("#addTerminForm [name="+response.fehlerInput[i]+"]").style.background = 'red';
            }
            meldung.append(response.fehlerInput);
        }
    })
    .catch((errorThrown) => {
        meldung.innerHTML = errorThrown;
    })
    ;
};

document.getElementById('addSeasonsConfigForm').onsubmit = function(e) {

    e.preventDefault();
    const postData = new FormData(this);

    if(document.getElementById('addSeasonsConfigForm-season_id').disabled === true) {
        postData.append('season_id', document.getElementById('addSeasonsConfigForm-season_id').value);
    }

    fetch('{{ constant('BASIS_URL') }}/admin/insertUpdateCourseSeasonsConfig', {
        method: 'POST',
        body: postData
    })
    .then(response => response.json())
    .then(response => {
        if(typeof response.fehler === 'undefined') {

            var inputs = document.querySelector("#addSeasonsConfigForm input");

            for (var i=0; i < inputs.length; i++) {
                test[i].style.background = '';
            }

            meldung.innerHTML = response.info;
            meldung.append("<br>");

            for(var i in response.data)
            {
                meldung.append(i+" = ");
                meldung.append(response.data[i]);
                meldung.append("<br>");
            }
            meldung.append("<br><br>");
            meldung.append(response);
            setTimeout(function () {
                location.reload();
            }, 1000);
        }
        else {
            meldung.innerHTML = response.fehler;

            var inputs = document.querySelector("#addSeasonsConfigForm input");

            for (var i=0; i < inputs.length; i++) {
                inputs[i].style.background = '';
            }

            for(i=0; i<response.fehlerInput.length; i++) {
                document.querySelector("#addTerminForm [name="+response.fehlerInput[i]+"]").style.background = 'red';
            }
            meldung.append(response.fehlerInput);
        }
    })
    .catch((errorThrown) => {
        meldung.innerHTML = errorThrown;
    });
};
</script>
{% endblock %}
{% endblock %}
